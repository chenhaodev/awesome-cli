#!/usr/bin/env python
import argparse
import base64
import os
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

def encrypt_message(message, password):
    msg = bytes(message, encoding='utf-8')
    password = bytes(password, encoding='utf-8')
    salt = b'20240324'
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=480000,
    )
    key = base64.urlsafe_b64encode(kdf.derive(password))
    f = Fernet(key)
    token = f.encrypt(msg)
    print('key: ', end='')
    print(key.decode('utf-8'))
    print('token: ', end='')
    print(token.decode('utf-8'))

def main():
    parser = argparse.ArgumentParser(description="Encrypt a message using Fernet symmetric encryption.")
    parser.add_argument("-m", "--message", type=str, help="Message to encrypt.", required=True)
    parser.add_argument("-p", "--password", type=str, help="Password for encryption.", default="xch123")
    args = parser.parse_args()
    
    encrypt_message(args.message, args.password)

if __name__ == "__main__":
    main()
